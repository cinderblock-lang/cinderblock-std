namespace std.iterable {
  export struct StringIterableContext {
    next: () -> StringIterableContext;
    done: bool;
    result?: char;
  }

  export fn StringIterable(target: string): StringIterableContext {
    return make StringIterableContext {
      assign done = target.length() == 0i;

      store wrapper = fn (current: int) -> {
        return make StringIterableContext {
          assign done = current == target.length();

          assign next = fn () -> wrapper(current + 1i);

          assign result = target.get_char(current);
        };
      };

      assign next = fn () -> wrapper(0i);
    };
  }
}