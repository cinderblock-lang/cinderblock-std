namespace std.string.utf_8 {
  using std.string;
  using std.testing;
  
  export struct StringIterableContext {
    done: bool;
    result?: char;
  }

  export fn to_iterable(target: string): (index: int) -> StringIterableContext {
    return fn (index: int) -> make StringIterableContext {
      assign done = index >= target.length();
      assign result = target.get_char(index);
    };
  }

  fn isolate_bits(target: int, skip: int, take: int): int {
    store mask = (1i << take) - 1i;
    store start = target >> skip;
    return start & mask;
  }

  fn add_four_bytes(subject: string, target: int): string {
    return subject
      .add_char(0b11110000 + target.isolate_bits(18i, 3i))
      .add_char(0b10000000 + target.isolate_bits(12i, 6i))
      .add_char(0b10000000 + target.isolate_bits(6i, 6i))
      .add_char(0b10000000 + target.isolate_bits(0i, 6i));
  }

  fn add_three_bytes(subject: string, target: int): string {
    return subject
      .add_char(0b11100000 + target.isolate_bits(12i, 4i))
      .add_char(0b10000000 + target.isolate_bits(6i, 6i))
      .add_char(0b10000000 + target.isolate_bits(0i, 6i));
  }

  fn add_two_bytes(subject: string, target: int): string {
    return subject
      .add_char(0b11000000 + target.isolate_bits(6i, 5i))
      .add_char(0b10000000 + target.isolate_bits(0i, 6i));
  }

  fn add_one_bytes(subject: string, target: int): string {
    return subject.add_char(target);
  }

  export fn add_character(subject: string, target: int): string {
    return if (target >= (255i * 255i * 255i)) {
      return subject.add_four_bytes(target);
    } else {
      return if (target >= (255i * 255i)) {
        return subject.add_three_bytes(target);
      } else {
        return if (target >= 255i) {
          return subject.add_two_bytes(target);
        } else {
          return subject.add_one_bytes(target);
        };
      };
    };
  }

  test "std.string.utf_8.add_character Creats a single bit char" {
    return "".add_character(48i).expect_equals("0");
  }

  test "std.string.utf_8.add_character Creates a two bit char" {
    return "".add_character(502i).expect_equals("Ç¶");
  }

  test "std.string.utf_8.add_character Creates a three bit char" {
    return "".add_character(128516i).expect_equals("ğŸ˜„");
  }
}